---
- name: Remove udev rules for wifi
  file: path=/etc/udev/rules.d/70-persistent-net.rules state=absent
  tags: ['master']

- name: download exfat kernel module
  unarchive:
    src: "{{ mirror }}/dev/exfat_{{ kernel_version }}.tar"
    dest: /tmp/
    remote_src: True
  tags: master

- name: install module files
  command: install -m644 -b -D /tmp/exfat_{{ item }}.ko /lib/modules/{{ item }}+/kernel/fs/exfat/exfat.ko
  with_items:
    - "{{ kernel_version }}"
    - "{{ kernel_version }}-v7"
  tags: master

- name: make temp directories to fool depmod
  file:
    dest: /tmp/{{ item }}/lib/modules
    state: directory
  with_items:
    - "{{ kernel_version }}"
    - "{{ kernel_version }}-v7"
  tags: master

- name: create symlinks to fool depmod
  file:
    src: /lib/modules/{{ item }}+
    dest: /tmp/{{ item }}/lib/modules/{{ qemu_kernel_version }}
    state: link
  with_items:
    - "{{ kernel_version }}"
    - "{{ kernel_version }}-v7"
  tags: master

- name: regenerate modules list
  command: depmod -a -b /tmp/{{ item }}
  with_items:
    - "{{ kernel_version }}"
    - "{{ kernel_version }}-v7"
  tags: master

- name: add exfat module to startup list
  lineinfile:
    dest: /etc/modules-load.d/modules.conf
    line: exfat
    state: present
  tags: master

- name: check if exfat is already loaded
  shell: cat /proc/filesystems |grep exfat | wc -l
  register: has_exfat
  tags: master

- name: load exfat module for current run
  command: modprobe exfat
  when: has_exfat.stdout.strip()|int == 0
  tags: master

- name: install stretch debian keyring
  apt:
    deb: http://ftp.fr.debian.org/debian/pool/main/d/debian-archive-keyring/debian-archive-keyring_2017.5_all.deb
  when: ansible_distribution_release == "stretch"
  tags: master

- name: install jessie debian keyring
  apt:
    deb: http://ftp.fr.debian.org/debian/pool/main/d/debian-archive-keyring/debian-archive-keyring_2017.5~deb8u1_all.deb
  when: ansible_distribution_release == "jessie"
  tags: master

- name: Drop a complete sources.list
  copy: src=sources_{{ ansible_distribution_release }}.list dest=/etc/apt/sources.list
  when: ansible_distribution == "Debian"
  tags: master

- name: Run apt update
  apt:
    update_cache: yes
  tags: ['master', 'configure']

- name: Fix broken package
  shell: dpkg --configure -a
  tags: ['master']

- name: Remove unwanted packages before upgrading
  apt: name={{ item }} state=absent purge=yes
  with_items:
   - apache2
   - apache2-mpm-worker
   - apache2-utils
   - apache2.2-bin
   - apache2.2-common
   - btrfs-tools
   - figlet
   - toilet
   - bluez
   - fping
   - stress
   - iperf
   - iotop
   - lirc
   - apt-listchanges
   - clipit
   - sslh
  tags: ['master']

- name: Install all required package
  apt: name={{ item }} state=latest
  with_items:
   - python-pip
   - python-dev
   - python-setuptools
   - python-virtualenv
   - virtualenv
   - git
   - sudo
   - lsb-release
   - vim
   - locate
   - git
   - unzip
   - bash-completion
   - aptitude
   - ntpdate
   - fake-hwclock
   - hdparm
   - ncurses-term
   - libffi-dev
   - libssl-dev
   - tree
   - screen
   - iftop
   - tmux
   - mtr-tiny
   - libwww-perl
   - httpie
   - lshw
   - hwinfo
   - sqlite3
   - elinks
   - mosh
   - curl
   - apt-transport-https
   - tar
   - exfat-utils
  tags: ['master']

- name: Install avahi packages
  apt: name={{ item }} state=latest
  with_items:
   - avahi-daemon
   - libnss-mdns
   - avahi-utils
  tags: ['master']

- name: Upgrade pip to the latest version
  pip:
    name: pip
    state: latest
  tags: ['master']

- name: Check for Ralink Wireless Network Adapter
  shell: lsusb | grep -F "Ralink Technology" ; echo
  register: lsusb_ralink
  tags: ['master', 'hardware']

- include: ralink.yml
  when: lsusb_ralink.stdout != "" and (ansible_architecture == 'x86_64' or ansible_architecture == 'i386')
  tags: ['master', 'hardware']

- name: Check for Realtek Wireless Network Adapter
  shell: lspci | grep -F "Realtek Semiconductor" ; echo
  register: lspci_realtek
  tags: ['master', 'hardware']

- include: realtek.yml
  when: lspci_realtek.stdout != "" and (ansible_architecture == 'x86_64' or ansible_architecture == 'i386')
  tags: ['master', 'hardware']

- name: Test if a fex file exist (old olimex lime2 image)
  stat: path=/boot/bin/lime2.bin
  register: fex_file
  tags: ['master', 'hardware']

- name: Test if a DTB Lime2 file exist (new olimex lime2 image)
  stat: path=/boot/dtb/sun7i-a20-olinuxino-lime2.dtb
  register: dtb_file
  tags: ['master', 'hardware']

- include: lime2.yml
  when: fex_file.stat.exists is defined and fex_file.stat.exists 
    or dtb_file.stat.exists is defined and dtb_file.stat.exists

- name: List services to restart (1/2)
  shell: checkrestart | grep ^service | awk '{print $2}'
  register: services
  changed_when: False
  tags: ['master', 'hardware']

- name: Allow unauthenticated packages
  lineinfile: dest=/etc/apt/apt.conf.d/9999IDEASCUBEISABADBADBOY line='APT::Get::AllowUnauthenticated "true";' create=yes
  tags: ['master']

- name: Upgrade packages
  apt: upgrade=safe
  tags: ['master']

- name: Remove the unauthenticated hack
  file: path=/etc/apt/apt.conf.d/9999IDEASCUBEISABADBADBOY state=absent
  tags: ['master']

- name: Drop hosts file on device
  template: src=hosts.j2 dest=/etc/hosts
  tags: ['master', 'rename']

- name: Create an ideascube user on the system
  user: name={{ username }}
        shell=/bin/bash
        groups="sudo,www-data,adm,staff"
        home="/home/{{ username }}"
        generate_ssh_key=yes
        ssh_key_bits=2048
        ssh_key_file=.ssh/id_rsa
        password={{ password }}
        update_password='on_create'
  tags: ['master']

- name: Add locales
  locale_gen: name="{{ item }}" state=present
  with_items:
  - fr_FR.UTF-8
  - en_US.UTF-8
  tags: ['master']

- name: Copy a blank rc.local
  copy: src=rc.local dest=/etc/rc.local owner=root group=root mode=0644 backup=yes
  tags: ['master']

- name: Copy .bashrc for root
  copy: src=bashrc dest=/root/.bashrc owner=root
  tags: ['master']

- name: Copy the global vimrc file
  copy: src=vimrc.local dest=/etc/vim/vimrc.local owner=root mode=0644
  tags: ['master']

- name: Copy .bashrc for new username
  copy: src=bashrc dest=/home/{{ username }}/.bashrc owner={{ username }}
  tags: ['master']

- name: Copy visudo file for ideascube user
  template: src=visudo.j2 dest=/etc/sudoers.d/shutdown
    owner=root group=root mode=0440 validate="/usr/sbin/visudo -cf %s"
  tags: ['master']

- name: Create local directory to work from
  file: path=/var/lib/ansible/local state=directory owner=root group=root mode=0751
  tags: ['master']

- name: Create ansible hosts directory to work from
  file: path=/etc/ansible/ state=directory owner=root group=root mode=0751
  tags: ['master']

- name: Copy ansible inventory file to client
  copy: src=hosts dest=/etc/ansible/hosts
          owner=root group=root mode=0644
  tags: ['master']

- name: Remove the existing localtime file
  file: path=/etc/localtime state=absent
  tags: ['master', 'configure']

- name: Set a new localtime file corresponding to the timezone
  file: src=/usr/share/zoneinfo/{{ timezone }} dest=/etc/localtime state=link force=yes
  tags: ['master', 'configure']

- name: Set timezone variables
  copy: content={{ timezone }} dest=/etc/timezone owner=root group=root mode=0644 backup=yes
  notify: update timezone
  tags: ['master', 'configure']

- name: Checking if grub conf file is there
  stat: path=/etc/default/grub
  register: is_grub
  tags: ['master']

- name: Shorten GRUB_TIMEOUT
  lineinfile:
    dest:       /etc/default/grub
    state:      present
    backup:     yes
    regexp:     '^GRUB_TIMEOUT=.*'
    line:       'GRUB_TIMEOUT=0'
  notify: Update grub
  when: is_grub.stat.exists is defined and is_grub.stat.exists
  tags: ['master']

- include: mark_role.yml role=system
  tags: resize
